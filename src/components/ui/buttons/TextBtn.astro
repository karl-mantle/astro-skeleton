---
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";

interface Props extends HTMLAttributes<"a"> {
  disabled?: boolean;
  label: string;
  icon?: string;
  iconAnimate?: boolean;
  iconReverse?: boolean;
  iconSize?: number;
  openNewTab?: boolean;
}

const {
  disabled,
  label,
  icon,
  iconAnimate,
  iconReverse,
  iconSize = 21,
  openNewTab,
  href,
  class: className,
  ...rest
}: Partial<Props> = Astro.props;

const newTabAttributes = openNewTab ? { target: "_blank", rel: "noreferrer noopener" } : {};
---

<a
  class:list={[
    "not-prose group/btn hover:border-primary-950 focus-visible:bg-focus-visible hover:text-primary-950 flex w-fit items-center justify-center border-b-2 border-transparent p-1 font-medium transition-colors duration-300 focus-visible:border-b-2 focus-visible:border-black focus-visible:text-black dark:hover:border-white dark:hover:text-white",
    label && icon ? "gap-2" : "",
    iconReverse ? "flex-row-reverse" : "",
    disabled &&
      "text-primary-200 hover:!text-primary-200 dark:text-primary-800 dark:hover:!text-primary-800 cursor-not-allowed hover:border-transparent",
    className,
  ]}
  href={disabled ? undefined : href}
  tabindex={disabled ? "-1" : undefined}
  aria-disabled={disabled ? "true" : undefined}
  {...newTabAttributes}
  {...rest}
>
  <span>{label}</span>

  {openNewTab && <span class="sr-only">(opens in a new tab)</span>}

  {
    icon && (
      <Icon
        class:list={[
          "self-center",
          iconAnimate ? "transition-transform duration-300 group-hover/btn:-rotate-45" : "",
        ]}
        name={icon}
        height={iconSize}
        width={iconSize}
      />
    )
  }
</a>
