---
import { Icon } from "astro-icon/components";
---

<div
  id="search-modal"
  tabindex="-1"
  role="dialog"
  aria-modal="true"
  aria-hidden="true"
  class="hidden"
>
  <div class="fixed z-45 w-full bg-black/75 transition duration-300" id="search-overlay"></div>

  <div
    class="bg-primary-200 relative z-50 flex h-full w-screen flex-col gap-4 px-4 pt-16 md:h-fit md:max-w-3xl md:p-8"
  >
    <div class="flex items-center justify-between">
      <span class="text-lg font-medium">Search this site</span>

      <button
        class="hover:text-primary-950 focus-visible:bg-focus-visible cursor-pointer border-b-2 border-transparent p-2 transition duration-300 hover:backdrop-invert focus-visible:border-black focus-visible:text-black"
        aria-label="close search"
        aria-pressed="false"
        id="search-close-btn"
      >
        <Icon name="material-symbols:close" height={24} width={24} />
      </button>
    </div>

    <form class="group/search relative flex" action={`${Astro.site}search`} method="GET">
      <input
        class="border-primary-900 placeholder:text-primary-900 group-hover/search:placeholder:text-primary-950 ring-secondary-500 w-full p-4 pr-12"
        type="text"
        name="q"
        placeholder="Search"
      />
      <button
        class="focus-visible:bg-focus-visible group-hover/search:text-primary-950 absolute top-1/2 right-4 -translate-y-1/2 transition duration-300 group-focus/search:text-black hover:cursor-pointer focus-visible:p-1 focus-visible:text-black"
        type="submit"
      >
        <span class="sr-only">Search</span>
        <Icon class="w-4.5" name="material-symbols:search" height={18} width={18} />
      </button>
    </form>
  </div>
</div>

<script>
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-nocheck
  function initSearchModal() {
    const modal = document.getElementById("search-modal");
    const toggleBtn = document.getElementById("search-toggle-btn");
    const closeBtn = document.getElementById("search-close-btn");
    const overlay = document.getElementById("search-overlay");
    let searchOpen = false;

    const trapFocus = (element) => {
      const handleKeyDown = (e) => {
        if (e.key !== "Tab") return;
        // check this list
        const focusableSelectors = [
          "a[href]",
          "area[href]",
          'input:not([disabled]):not([type="hidden"])',
          "select:not([disabled])",
          "textarea:not([disabled])",
          "button:not([disabled])",
          "iframe",
          "object",
          "embed",
          "[contenteditable]",
          '[tabindex]:not([tabindex="-1"])',
        ];

        const focusableElements = Array.from(
          element.querySelectorAll(focusableSelectors.join(",")),
        );
        if (focusableElements.length === 0) return;

        const firstFocusable = focusableElements[0];
        const lastFocusable = focusableElements[focusableElements.length - 1];

        if (e.shiftKey) {
          if (document.activeElement === firstFocusable) {
            e.preventDefault();
            lastFocusable.focus();
          }
        } else {
          if (document.activeElement === lastFocusable) {
            e.preventDefault();
            firstFocusable.focus();
          }
        }
      };
      element.addEventListener("keydown", handleKeyDown);

      return () => element.removeEventListener("keydown", handleKeyDown);
    };

    const updateModal = () => {
      if (searchOpen) {
        modal?.classList.remove("hidden");
        modal?.classList.add(
          "z-50",
          "fixed",
          "md:inset-0",
          "top-0",
          "left-0",
          "right-0",
          "h-full",
          "w-full",
          "flex",
          "justify-center",
          "md:items-center",
          "bg-black/50",
        );
        modal?.setAttribute("aria-hidden", "false");
        toggleBtn?.setAttribute("aria-pressed", "true");
        trapFocus(modal);
        updateBodyScrollLock();

        setTimeout(() => {
          const searchInput = modal.querySelector(".pagefind-ui__search-input");
          if (searchInput) {
            searchInput.focus();
          } else {
            modal.focus();
          }
        }, 0);
      } else {
        modal?.classList.add("hidden");
        modal?.classList.remove(
          "z-50",
          "fixed",
          "md:inset-0",
          "top-0",
          "left-0",
          "right-0",
          "h-full",
          "w-full",
          "flex",
          "justify-center",
          "md:items-center",
          "bg-black/50",
        );
        modal?.setAttribute("aria-hidden", "true");
        toggleBtn?.setAttribute("aria-pressed", "false");
        toggleBtn?.focus();
        updateBodyScrollLock();
      }
    };

    const updateBodyScrollLock = () => {
      document.body.classList.toggle("h-full", searchOpen);
      document.body.classList.toggle("overflow-hidden", searchOpen);
    };

    toggleBtn?.addEventListener("click", () => {
      searchOpen = !searchOpen;
      updateModal();
    });

    closeBtn?.addEventListener("click", () => {
      searchOpen = false;
      updateModal();
    });

    overlay?.addEventListener("click", () => {
      searchOpen = false;
      updateModal();
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        searchOpen = false;
        updateModal();
      }
    });
  }
  document.addEventListener("DOMContentLoaded", initSearchModal);
  document.addEventListener("astro:after-swap", initSearchModal);
</script>
