---
import { Icon } from "astro-icon/components";
---

<div
  id="search-modal"
  class="fixed inset-0 flex hidden flex-col items-center justify-center bg-black/75"
  tabindex="-1"
  role="dialog"
  aria-modal="true"
  aria-labelledby="search-modal-title"
  aria-hidden="true"
>
  <div
    class="bg-primary-200 relative z-50 flex h-full w-screen flex-col gap-4 px-4 pt-16 transition-opacity md:h-fit md:max-w-3xl md:p-8"
  >
    <div class="flex items-center justify-between">
      <div id="search-modal-title" class="text-lg font-medium">Search this site</div>

      <button
        id="search-close-btn"
        class="hover:text-primary-950 hover:bg-primary-300 focus-visible:bg-focus-visible cursor-pointer border-b-2 border-transparent p-2 transition duration-300 focus-visible:border-black focus-visible:text-black"
        type="button"
        aria-label="close search"
      >
        <Icon name="material-symbols:close" height={24} width={24} />
      </button>
    </div>

    <form class="group/search relative flex" action={`${Astro.site}search`} method="GET">
      <label for="search-input" class="sr-only">Search this site</label>
      <input
        id="search-input"
        class="border-primary-900 placeholder:text-primary-900 group-hover/search:placeholder:text-primary-950 ring-secondary-500 w-full p-4 pr-12"
        type="text"
        name="q"
        placeholder="Search"
      />
      <button
        class="focus-visible:bg-focus-visible group-hover/search:text-primary-950 absolute top-1/2 right-4 -translate-y-1/2 transition duration-300 group-focus/search:text-black hover:cursor-pointer focus-visible:p-1 focus-visible:text-black"
        type="submit"
      >
        <span class="sr-only">Search</span>
        <Icon class="w-4.5" name="material-symbols:search" height={18} width={18} />
      </button>
    </form>
  </div>
</div>

<script>
  function initSearchModal() {
    const modal = document.getElementById("search-modal");
    const toggleBtn = document.getElementById("search-open-btn");
    const closeBtn = document.getElementById("search-close-btn");

    if (!modal || !toggleBtn) return;
    if (modal.dataset.initialized === "true") return;
    modal.dataset.initialized = "true";

    let searchOpen = false;
    let cleanupFocusTrap: (() => void) | null = null;

    /* toggle body scroll lock */
    const lockBody = (lock: boolean) => {
      document.body.classList.toggle("h-full", lock);
      document.body.classList.toggle("overflow-hidden", lock);
    };

    /* trap focus inside the modal */
    const trapFocus = (element: HTMLElement) => {
      const focusableSelectors = [
        "a[href]",
        "area[href]",
        'input:not([disabled]):not([type="hidden"])',
        "select:not([disabled])",
        "textarea:not([disabled])",
        "button:not([disabled])",
        "iframe",
        "object",
        "embed",
        "[contenteditable]",
        '[tabindex]:not([tabindex="-1"])',
      ].join(",");

      const handleKeyDown = (e: KeyboardEvent) => {
        if (e.key !== "Tab") return;

        const focusables = Array.from(element.querySelectorAll<HTMLElement>(focusableSelectors));
        if (focusables.length === 0) return;

        const first = focusables[0];
        const last = focusables[focusables.length - 1];
        const active = document.activeElement;

        if (e.shiftKey && active === first) {
          e.preventDefault();
          last.focus();
        } else if (!e.shiftKey && active === last) {
          e.preventDefault();
          first.focus();
        }
      };

      element.addEventListener("keydown", handleKeyDown);
      return () => element.removeEventListener("keydown", handleKeyDown);
    };

    /* update modal open/closed state */
    const updateModal = () => {
      modal.classList.toggle("hidden", !searchOpen);
      modal.setAttribute("aria-hidden", String(!searchOpen));
      toggleBtn.setAttribute("aria-pressed", String(searchOpen));
      lockBody(searchOpen);

      if (searchOpen) {
        cleanupFocusTrap = trapFocus(modal);
        requestAnimationFrame(() => {
          const input = modal.querySelector<HTMLInputElement>(".pagefind-ui__search-input");
          (input ?? modal).focus();
        });
      } else {
        cleanupFocusTrap?.();
        cleanupFocusTrap = null;
        toggleBtn.focus();
      }
    };

    /* event handlers */
    const closeModal = () => {
      searchOpen = false;
      updateModal();
    };

    toggleBtn.addEventListener("click", () => {
      searchOpen = !searchOpen;
      updateModal();
    });

    closeBtn?.addEventListener("click", closeModal);

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && searchOpen) closeModal();
    });
  }

  document.addEventListener("astro:page-load", initSearchModal);
</script>
