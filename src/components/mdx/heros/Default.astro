---
import type { ImageMetadata } from "astro";
import type { HTMLAttributes } from "astro/types";
import { Picture } from "astro:assets";
import YouTube from "../integrations/videos/YouTube.astro";
import Vimeo from "../integrations/videos/Vimeo.astro";

interface Props extends HTMLAttributes<"header"> {
  aspect: "square" | "video" | "landscape";
  class: string;
  description: string;
  heading: string;
  height: string;
  image?: {
    alt: string | null;
    src: ImageMetadata;
  };
  video?: {
    player: string;
    src: string;
  };
}

const heightMap: Record<Props["height"], string> = {
  full: "2xl:aspect-video 2xl:h-[calc(100vh-74px)]", // ! 74px = header height
};

const {
  description,
  heading,
  height = "small",
  image,
  video,
  class: className,
}: Props = Astro.props;
---

<header
  class:list={[
    "relative flex h-full w-full flex-col overflow-hidden",
    heightMap[height],
    className,
  ]}
>
  {
    image && !video && (
      <>
        <div class="absolute inset-0 -z-2">
          <Picture
            src={image.src}
            widths={[420, 1024, 1920]}
            sizes="(max-width: 640px) 420px, (max-width: 1024px) 1024px, 100vw"
            inferSize
            formats={["webp"]}
            loading="lazy"
            class="h-full w-full object-cover"
            alt={image.alt ?? ""}
          />
        </div>

        <div class="absolute inset-0 -z-1 bg-gradient-to-b from-black/30 to-black/70" />
      </>
    )
  }

  {
    video && (
      <>
        <div class="absolute inset-0 -z-2 overflow-hidden 2xl:scale-110">
          {video.player === "vimeo" ? (
            <Vimeo
              class="!max-w-none"
              url={video.src}
              params="mute=0&loop=1&rel=0&muted=1&background=1&controls=0&dnt=1"
              data-bg-video
            />
          ) : (
            <YouTube url={video.src} data-bg-video />
          )}
        </div>

        <div class="absolute inset-0 -z-1 bg-gradient-to-b from-black/30 to-black/70" />
      </>
    )
  }

  <div
    class="mx-auto flex h-full max-w-5xl flex-col justify-end gap-4 px-4 py-8 text-white lg:py-16"
  >
    <h1 class="max-w-[75ch]">{heading}</h1>
    <p class="max-w-[75ch]">{description}</p>
  </div>
</header>

<script>
  function initBgVideos() {
    const bgVideos = document.querySelectorAll<HTMLElement>("[data-bg-video]");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const el = entry.target as HTMLElement;

          if (entry.isIntersecting && !el.classList.contains("ltv-activated")) {
            el.click();
          }
        });
      },
      {
        threshold: 0.25, // ! adjust threshold
      },
    );

    bgVideos.forEach((el) => observer.observe(el));
  }

  document.addEventListener("astro:page-load", initBgVideos);
</script>
